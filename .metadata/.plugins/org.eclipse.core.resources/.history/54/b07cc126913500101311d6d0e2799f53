/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f303xe.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void BNO_INITIALIZE() {
	RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;     // Enable GPIOA
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;   // Enable USART2
	GPIOA->MODER   &= ~((3 << (2*2)) | (3 << (2*3)));  // Clear PA2, PA3 mode
	GPIOA->MODER   |=  (2 << (2*2)) | (2 << (2*3));    // Set to Alternate Function

	GPIOA->AFR[0]  &= ~((0xF << (4*2)) | (0xF << (4*3)));  // Clear AF bits
	GPIOA->AFR[0]  |=  (7 << (4*2)) | (7 << (4*3));        // AF7 = USART2
	GPIOA->OSPEEDR |=  (3 << (2*9)) | (3 << (2*10));    // High speed
	GPIOA->PUPDR   &= ~((3 << (2*9)) | (3 << (2*10)));  // No pull
	USART2->CR1 = 0;  // Disable before configuration

	USART2->BRR = SystemCoreClock / 115200;  // Set baud rate (assuming PCLK1 == SystemCoreClock)

	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;  // Enable TX, RX, UART

}

void uart2_send(uint8_t byte) {
    while (!(USART2->ISR & USART_ISR_TXE));
    USART2->TDR = byte;
}

uint8_t uart2_recv(void) {
    while (!(USART2->ISR & USART_ISR_RXNE));
    return USART2->RDR;
}

int main(void)
{
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
	GPIOE->MODER |= (1 << (2 * 9));
	while(1) {
		GPIOE->MODER |= (1 << (2 * 9));
	}
}
